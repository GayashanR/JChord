/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chord;

import static chord.Sender.data;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author GayashanRathnavibush
 */
public class ChordMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChordMainFrame
     */
    String resMsg;
    Node node;
    ChordFileSearch chordFileSearch;
    long[] keyList;
    List<String> fileList;
    private Map<String, List<Finger>> keys = new HashMap<>();
    public ChordMainFrame() {
        initComponents();
        lblJoinStatus.setText("");
        
        DefaultListModel listModel = new DefaultListModel();
        fileList = new ArrayList<>();

        ArrayList<String> zNames = new ArrayList<>();
        try {
            File myObj = new File("FileNames.txt");
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                zNames.add(data);
        }
        myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        Random rand = new Random();
        Collections.shuffle(zNames);
        int size = rand.nextInt(5)+ 1;
        keyList = new long[size];
        for(int i = 0; i < size ; i++)
        {
            listModel.addElement(zNames.get(i));
            fileList.add(zNames.get(i));
            keyList[i] = new SHA1Hasher(zNames.get(i)).getLong();
        }
        lstSharedFiles.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtIP = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtBSIP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtBSPort = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtISPort = new javax.swing.JTextField();
        txtISIP = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSharedFiles = new javax.swing.JList<>();
        lblJoinStatus = new javax.swing.JLabel();
        btnJoin = new javax.swing.JButton();
        btnLeave = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        txtFileName = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();
        btnDownload = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSearchResults = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        txtDownloadFolder = new javax.swing.JTextField();
        btnSetFolder = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        menuItemFingerTable = new javax.swing.JMenuItem();
        menuItemFileKeys = new javax.swing.JMenuItem();
        menuItemQMsgDetails = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 153));
        jLabel1.setText("Chord Incognito");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Set Configuraton Details");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Username");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("IP Address");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Port");

        txtIP.setText("127.0.0.1");

        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("BS IP Address");

        txtBSIP.setText("127.0.0.1");
        txtBSIP.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("BS Port");

        txtBSPort.setText("55555");
        txtBSPort.setEnabled(false);
        txtBSPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBSPortActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Index Server IP Address");

        txtISPort.setText("4444");
        txtISPort.setEnabled(false);
        txtISPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtISPortActionPerformed(evt);
            }
        });

        txtISIP.setText("127.0.0.1");
        txtISIP.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Index Server Port");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Shared Files");

        jScrollPane1.setViewportView(lstSharedFiles);

        lblJoinStatus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblJoinStatus.setText("d");

        btnJoin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnJoin.setText("Join the Network");
        btnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinActionPerformed(evt);
            }
        });

        btnLeave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLeave.setText("Leave the Network");
        btnLeave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeaveActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("File Name");

        txtFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFileNameActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDownload.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        tblSearchResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "File Name", "Peer Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblSearchResults);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Download Folder");

        txtDownloadFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDownloadFolderActionPerformed(evt);
            }
        });

        btnSetFolder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSetFolder.setText("Set Folder");
        btnSetFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFolderActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        viewMenu.setText("View");

        menuItemFingerTable.setText("Finger Table");
        menuItemFingerTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFingerTableActionPerformed(evt);
            }
        });
        viewMenu.add(menuItemFingerTable);

        menuItemFileKeys.setText("File keys");
        menuItemFileKeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFileKeysActionPerformed(evt);
            }
        });
        viewMenu.add(menuItemFileKeys);

        menuItemQMsgDetails.setText("Query Message Details");
        menuItemQMsgDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemQMsgDetailsActionPerformed(evt);
            }
        });
        viewMenu.add(menuItemQMsgDetails);

        jMenuBar1.add(viewMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                                .addComponent(txtBSIP, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(107, 107, 107)
                                .addComponent(txtFileName)))
                        .addGap(2, 2, 2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(71, 71, 71))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLeave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnJoin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblJoinStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addComponent(jSeparator4)
            .addComponent(jSeparator5)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(205, 205, 205)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBSPort, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(57, 57, 57)
                                        .addComponent(txtISPort))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtISIP, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDownloadFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(btnSetFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnJoin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblJoinStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLeave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(txtBSIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBSPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtISIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtISPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtDownloadFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSetFolder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDownload))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemFingerTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFingerTableActionPerformed
        FingerTableFrame fingerView = new FingerTableFrame();
        fingerView.setData(node.getId(), node.getFingers());
        fingerView.setVisible(true);
        fingerView.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_menuItemFingerTableActionPerformed

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortActionPerformed

    private void txtBSPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBSPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBSPortActionPerformed

    private void txtISPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtISPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtISPortActionPerformed

    private void txtFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFileNameActionPerformed

    private void btnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinActionPerformed
        Config.BOOTSTRAP_IP = txtBSIP.getText();
        Config.BOOTSTRAP_PORT = Integer.valueOf(txtBSPort.getText());
        Config.MY_IP = txtIP.getText();
        Config.MY_NAME = txtUsername.getText();
        Config.MY_PORT = Integer.valueOf(txtPort.getText());
        
        RegisterResponse regRes = register();
        if(!regRes.isInitialNode())
        {
            node = new Node(txtIP.getText(), txtPort.getText(), regRes.getPeerIps(), regRes.getpeerPorts());
        }
        else
        {
            node = new Node(txtIP.getText(), txtPort.getText());
        }
        
        lblJoinStatus.setText(resMsg);
        
        //Message String creation
        String message = "ADD:";
        
        message = message + String.join(":", fileList);

        for(int i = 0; i < keyList.length; i++)
        {
            List<Finger> lst = new ArrayList<>();
            lst.add(new Finger(txtIP.getText(), Integer.valueOf(txtPort.getText())));
            keys.put(keyList[i]+"", lst);
            
            //message.concat(keyList[i]+":");
        }
        
        
        node.setKeys(keys);

        chordFileSearch = new ChordFileSearch(node);
           

        //publish to index server
        InetAddress IPAddress1;
        try {
            DatagramSocket socket= new DatagramSocket();
            byte[] toSend1  = message.getBytes();
            IPAddress1 = InetAddress.getByName(txtISIP.getText());
            DatagramPacket packet =new DatagramPacket(toSend1, toSend1.length, IPAddress1, Integer.parseInt(txtISPort.getText()));
            socket.send(packet);
        } catch (UnknownHostException ex) {
            Logger.getLogger(NodeStabilizer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnJoinActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try
        {
            DefaultTableModel searchResultsDataModel = (DefaultTableModel) tblSearchResults.getModel();
            
            while (searchResultsDataModel.getRowCount()>0)
            {
               searchResultsDataModel.removeRow(0);
            }
            
            //Contact Index Server and Get Node List
            String fileQuery = txtFileName.getText().trim();
            String searchMessage = "SER:"+fileQuery; 

            DatagramSocket socket = new DatagramSocket();
            byte[] toSend  = searchMessage.getBytes();
            InetAddress IPAddress; 
                try {
                    IPAddress = InetAddress.getByName(txtISIP.getText());
                    DatagramPacket packet =new DatagramPacket(toSend, toSend.length, IPAddress, Integer.valueOf(txtISPort.getText()));
                    try {
                        socket.send(packet);
                    } catch (IOException ex) {
                        Logger.getLogger(ChordThread.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (UnknownHostException ex) {
                    Logger.getLogger(Node.class.getName()).log(Level.SEVERE, null, ex);
                }

            System.out.println("Sent: " + searchMessage);

            byte[] receive = new byte[65535]; 
            DatagramPacket DpReceive = new DatagramPacket(receive, receive.length); 
            try {
                socket.receive(DpReceive);
            } catch (IOException ex) {
                Logger.getLogger(ChordThread.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Read response from chord
            String serverResponse = data(receive).toString();
            System.out.println("Received: " + serverResponse);
            
            
            String[] serverResponseSegments = serverResponse.split(":");
            if(serverResponseSegments[0].equals("SEARCH_RES")){
                
                int searchResultCount = Integer.valueOf(serverResponseSegments[1]);
                
                int i=2;
                String fileName = "";
                String peerCount = "";
                
                while(i<serverResponseSegments.length){
                    fileName = serverResponseSegments[i];
                    peerCount = serverResponseSegments[i+1];
                    String[] dataRow = {fileName, peerCount};
                    searchResultsDataModel.addRow(dataRow); 
                    i=i+2;
                }
                
            }
            
        }catch(Exception e){
            System.err.println(e);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    
    private void btnLeaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeaveActionPerformed
        unreg();
        System.exit(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_btnLeaveActionPerformed

    private void menuItemFileKeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFileKeysActionPerformed
        ChordFileKeyFrame fileKeyFrame = new ChordFileKeyFrame();
        fileKeyFrame.setData(node.getId(), node.getKeys());
        fileKeyFrame.setVisible(true);
        fileKeyFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_menuItemFileKeysActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        //Get File Save Path
        if(txtDownloadFolder.getText()==null || txtDownloadFolder.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Please select a folder path", "File Download Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        
        int selectedRow = tblSearchResults.getSelectedRow();
        if(selectedRow!=-1){
            String fullFileName = tblSearchResults.getModel().getValueAt(selectedRow, 0).toString();
            //String fullFileName = txtFileName.getText()
            List<Object> peers = chordFileSearch.searchFile(fullFileName);
            String hops = (String)peers.get(2);
            long searchLatency = (long)peers.get(1);
            if((List<Finger>)peers.get(0)!=null && ((List<Finger>)peers.get(0)).size()>0)
            {
                List<String> nodeList = new ArrayList<>();
                ((List<Finger>)peers.get(0)).forEach(peer->{
                    nodeList.add(peer.getAddress()+":"+peer.getPort());
                });
                String peerListStr = String.join(", ", nodeList);
                //JOptionPane.showMessageDialog(null, "File Found at Peers - "+ peerListStr, "File Download", JOptionPane.INFORMATION_MESSAGE);
                
                
                int dialogResult = JOptionPane.showConfirmDialog (null, "File Found at Peers - "+ peerListStr+ ". Do you want to download from a random node?\nSearch Latency = " + searchLatency + "\nSearch hops = " + hops,"Download Confirmation",JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                    //TODO: Do Download Here
                    int randomNodeId = getRandomIntegerBetweenRange(0, nodeList.size()-1);
                    Finger selectedPeer = ((List<Finger>)peers.get(0)).get(randomNodeId);
                    int downloadPort = selectedPeer.getPort()+1000;
                    String fileDownloadURL = "http://localhost:"+downloadPort+"/api/download?file="+fullFileName.replaceAll(" ", "");
                    System.out.println("File is Downloading from "+fileDownloadURL+ " to "+txtDownloadFolder.getText());
                    try {
                        FileDownloadUtility.downloadFile(fileDownloadURL, txtDownloadFolder.getText());
                        JOptionPane.showMessageDialog(null, "File downloaded successfuly from node "+selectedPeer.getAddress()+":"+selectedPeer.getPort(), "File Download Successful", JOptionPane.INFORMATION_MESSAGE);
                        
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "File Not Found", "File Download Error", JOptionPane.WARNING_MESSAGE);
                        ex.printStackTrace();
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "File Not Found", "File Download Error", JOptionPane.WARNING_MESSAGE);
                }
                
                
                
                
            }
            else
                JOptionPane.showMessageDialog(null, "File Not Found", "File Download Error", JOptionPane.WARNING_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a file to download", "File Download Error", JOptionPane.WARNING_MESSAGE);
        }     
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void txtDownloadFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDownloadFolderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDownloadFolderActionPerformed

    private void btnSetFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFolderActionPerformed
        JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int option = fileChooser.showOpenDialog(this);
            if(option == JFileChooser.APPROVE_OPTION){
               File file = fileChooser.getSelectedFile();
               txtDownloadFolder.setText(file.getAbsolutePath());
            }
    }//GEN-LAST:event_btnSetFolderActionPerformed

    private void menuItemQMsgDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemQMsgDetailsActionPerformed
        JOptionPane.showMessageDialog(null, "Query Message Received\t\t: " + ChordThread.iMsgRecv + "\nQuery Message Answered\t\t: " + ChordThread.iMsgAns + "\nQuery Message Forwarded\t\t: " + ChordThread.iMsgForw, "Query Message details", JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_menuItemQMsgDetailsActionPerformed

    public static int getRandomIntegerBetweenRange(int min, int max){
        int x = (int)(Math.random()*((max-min)+1))+min;
        return x;
    }
    //generate SHA/MD5 file checksum
    private static String getFileChecksum(MessageDigest digest, File file) throws IOException
    {
        //Get file input stream for reading the file content
        FileInputStream fis = new FileInputStream(file);

        //Create byte array to read data in chunks
        byte[] byteArray = new byte[1024];
        int bytesCount = 0; 

        //Read file data and update in message digest
        while ((bytesCount = fis.read(byteArray)) != -1) {
            digest.update(byteArray, 0, bytesCount);
        };

        //close the stream; We don't need it now.
        fis.close();

        //Get the hash's bytes
        byte[] bytes = digest.digest();

        //This bytes[] has bytes in decimal format;
        //Convert it to hexadecimal format
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< bytes.length ;i++)
        {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }

        //return complete hash
       return sb.toString();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChordMainFrame().setVisible(true);
            }
        });
    }

    // Register node in super node
    public RegisterResponse register() {
        resMsg = "Failed";
        String message = (new Message(MessageType.REG, txtIP.getText(), Integer.valueOf(txtPort.getText()), txtUsername.getText())).getMessage();
        String response = Sender.getInstance().sendUDPMessage(message, txtBSIP.getText(), Integer.valueOf(txtBSPort.getText()));
        System.out.println("Response:" + response);
        lblJoinStatus.setForeground(Color.RED);
        if ((response.trim()).equals("-1")) {
            resMsg = "Failed";
            return new RegisterResponse(MessageType.REG_FAILURE, null, null);
        } else if ((response.trim()).equals("-2")) {
            resMsg = "Failed";
            unreg();
            return new RegisterResponse(MessageType.REG_FAILURE, null, null);
        } else {
            String[] splitted = response.split(" ");

            String noOfNodes = splitted[2];
            Config.myNodeNumber = Integer.parseInt(noOfNodes.trim());
            Config.noOfNodes = Config.myNodeNumber + 1;

            String[] peerIps;
            int[] peerPorts;

            // System.out.println(noOfNodes);
            switch (noOfNodes.trim()) {
                case "0":
                    resMsg = "Connected";
                    lblJoinStatus.setForeground(Color.GREEN);
                    return new RegisterResponse(MessageType.REG_SUCCESS, null, null);
                // break;
                case "1":
                    peerIps = new String[1];
                    peerPorts = new int[1];
                    peerIps[0] = splitted[3];
                    peerPorts[0] = Integer.parseInt(splitted[4]);
                    lblJoinStatus.setForeground(Color.GREEN);
                    resMsg = "Connected";
                    //  System.out.println(joinNetwork(peerIps[0], peerPorts[0]));
                    return new RegisterResponse(MessageType.REG_SUCCESS, peerIps, peerPorts);
                //  break;
                case "9996":
                    System.out.println("Failed, can’t register. BS full.");
                    resMsg = "Failed, can’t register. BS full.";
                    return new RegisterResponse(MessageType.REG_FAILURE, null, null);
                //     break;
                case "9997":
                    System.out.println("Failed, registered to another user, try a different IP and port");
                    resMsg = "Failed, registered to another user, try a different IP and port.";
                    return new RegisterResponse(MessageType.REG_FAILURE, null, null);
                //  break;
                case "9998":
                    System.out.println("Failed, already registered to you, unregister first");
                    resMsg = "Failed, already registered to you, unregister first.";
                    return new RegisterResponse(MessageType.REG_FAILURE, null, null);
                // break;
                case "9999":
                    System.out.println("Failed, there is some error in the command");
                    resMsg = "Failed, there is some error in the command.";
                    return new RegisterResponse(MessageType.REG_FAILURE, null, null);
                //  break;

                default:
                    peerIps = new String[2];
                    peerPorts = new int[2];
                    
                    peerIps[0] = splitted[3];
                    peerPorts[0] = Integer.parseInt(splitted[4]);
                    
                    peerIps[1] = splitted[5];
                    peerPorts[1] = Integer.parseInt(splitted[6]);
                    
                    lblJoinStatus.setForeground(Color.GREEN);
                    resMsg = "Connected";
                    return new RegisterResponse(MessageType.REG_SUCCESS, peerIps, peerPorts);
            }
        }
    }
    
    private void unreg() {
        String message = (new Message(MessageType.UNREG, txtIP.getText(), Integer.valueOf(txtPort.getText()), txtUsername.getText())).getMessage();
        Sender.getInstance().sendUDPMessage(message, txtBSIP.getText(), Integer.valueOf(txtBSPort.getText()));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnJoin;
    private javax.swing.JButton btnLeave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSetFolder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblJoinStatus;
    private javax.swing.JList<String> lstSharedFiles;
    private javax.swing.JMenuItem menuItemFileKeys;
    private javax.swing.JMenuItem menuItemFingerTable;
    private javax.swing.JMenuItem menuItemQMsgDetails;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable tblSearchResults;
    private javax.swing.JTextField txtBSIP;
    private javax.swing.JTextField txtBSPort;
    private javax.swing.JTextField txtDownloadFolder;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtISIP;
    private javax.swing.JTextField txtISPort;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
